// This is your Prisma schema file for RFP Software
// Multi-tenant enterprise-grade platform for Request for Proposal management

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Core Entities
model Tenant {
  id          String   @id @default(cuid())
  name        String
  region      String?
  plan        String   @default("standard") // standard, enterprise, custom
  settings    Json?
  branding    Json?
  marketplaceSettings Json?
  subscriptionTier String @default("basic") // basic, professional, enterprise
  subscriptionStatus String @default("active") // active, cancelled, suspended
  subscriptionEndsAt DateTime?
  billingInfo Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  users       User[]
  vendors     Vendor[]
  rfps        RFP[]
  files       File[]
  activityLog ActivityLog[]
  webhooks    WebhookEndpoint[]
  approvalWorkflows ApprovalWorkflow[]
  securityAlerts SecurityAlert[]
  publicRfps  PublicRFP[]
  transactions Transaction[]
  usageMetrics UsageMetrics[]
  
  @@map("tenants")
}

model User {
  id          String   @id @default(cuid())
  tenantId    String
  email       String
  name        String?
  roleIds     Json?    // Array of role IDs stored as JSON
  ssoId       String?
  mfaEnabled  Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  rfpTeams    RFP_Team[]
  scores      Score[]
  approvals   Approval[]
  activityLogs ActivityLog[] @relation("UserActivityLogs")
  approvalRequests ApprovalRequest[]
  vendorProfile VendorProfile?
  bidMessages BidMessage[]
  reviews     Review[]
  savedSearches SavedSearch[]
  notifications Notification[]
  answeredQnA  PublicQnA[] @relation("UserPublicQnA")

  @@map("users")
  @@unique([tenantId, email])
}

model Role {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  permissions Json?    // Array of permission strings stored as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("roles")
  @@unique([tenantId, name])
}

model Vendor {
  id              String   @id @default(cuid())
  tenantId        String
  name            String
  contactInfo     Json?
  categories      Json?    // Array of categories stored as JSON
  certifications  Json?    // Array of certifications stored as JSON
  diversityAttrs  Json?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  invitations     Invitation[]
  submissions     Submission[]
  qna             QnA[]
  acknowledgments Acknowledgment[]

  @@map("vendors")
}

model RFP {
  id              String   @id @default(cuid())
  tenantId        String
  title           String
  status          String   @default("draft") // draft, published, closed, awarded, archived
  category        String?
  budget          Float?
  confidentiality String   @default("internal") // internal, confidential, restricted
  publishAt       DateTime?
  closeAt         DateTime?
  settings        Json?
  isPublic        Boolean  @default(false)
  marketplaceId   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  timeline        RFP_Timeline?
  teams           RFP_Team[]
  sections        Section[]
  rubricCriteria  RubricCriterion[]
  invitations     Invitation[]
  qna             QnA[]
  addenda         Addendum[]
  submissions     Submission[]
  approvals       Approval[]
  activityLogs    ActivityLog[] @relation("RFPActivityLogs")
  approvalProcesses ApprovalProcess[]
  publicRfp       PublicRFP?

  @@map("rfps")
}

model RFP_Timeline {
  id                    String   @id @default(cuid())
  rfpId                 String   @unique
  qnaStart              DateTime?
  qnaEnd                DateTime?
  submissionDeadline    DateTime?
  evaluationStart       DateTime?
  awardTarget           DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  rfp                   RFP      @relation(fields: [rfpId], references: [id], onDelete: Cascade)

  @@map("rfp_timelines")
}

model RFP_Team {
  id        String   @id @default(cuid())
  rfpId     String
  userId    String
  role      String   // owner, editor, evaluator, approver, viewer
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  rfp       RFP      @relation(fields: [rfpId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([rfpId, userId])
  @@map("rfp_teams")
}

model Section {
  id          String   @id @default(cuid())
  rfpId       String
  order       Int
  title       String
  description String?
  isRequired  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  rfp         RFP        @relation(fields: [rfpId], references: [id], onDelete: Cascade)
  questions   Question[]
  rubricCriteria RubricCriterion[]

  @@map("sections")
  @@unique([rfpId, order])
}

model Question {
  id          String   @id @default(cuid())
  sectionId   String
  type        String   // text, number, multiple_choice, checkbox, file, date
  prompt      String
  required    Boolean  @default(false)
  constraints Json?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  section     Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  answers     Answer[]

  @@map("questions")
  @@unique([sectionId, order])
}

model RubricCriterion {
  id          String   @id @default(cuid())
  rfpId       String?
  sectionId   String?
  label       String
  weight      Float    @default(1.0)
  scaleMin    Int      @default(1)
  scaleMax    Int      @default(5)
  guidance    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  rfp         RFP?     @relation(fields: [rfpId], references: [id], onDelete: Cascade)
  section     Section? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  scores      Score[]
  consensus   ConsensusScore[]

  @@map("rubric_criteria")
}

model Invitation {
  id          String   @id @default(cuid())
  rfpId       String
  vendorId    String?
  email       String
  token       String   @unique
  expiresAt   DateTime?
  status      String   @default("pending") // pending, accepted, declined, expired
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  rfp         RFP      @relation(fields: [rfpId], references: [id], onDelete: Cascade)
  vendor      Vendor?  @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("invitations")
}

model QnA {
  id           String   @id @default(cuid())
  rfpId        String
  vendorId     String?
  questionText String
  answerText   String?
  isPublic     Boolean  @default(true)
  status       String   @default("pending") // pending, answered, published
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  rfp          RFP     @relation(fields: [rfpId], references: [id], onDelete: Cascade)
  vendor       Vendor? @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("qna")
}

model Addendum {
  id            String   @id @default(cuid())
  rfpId         String
  title         String
  note          String?
  attachments   Json?    // Array of file IDs stored as JSON
  requiresAck   Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  rfp           RFP            @relation(fields: [rfpId], references: [id], onDelete: Cascade)
  acknowledgments Acknowledgment[]

  @@map("addenda")
}

model Acknowledgment {
  id          String   @id @default(cuid())
  addendumId  String
  vendorId    String
  timestamp   DateTime @default(now())

  // Relationships
  addendum    Addendum @relation(fields: [addendumId], references: [id], onDelete: Cascade)
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([addendumId, vendorId])
  @@map("acknowledgments")
}

model Submission {
  id            String   @id @default(cuid())
  rfpId         String
  vendorId      String
  version       Int      @default(1)
  submittedAt   DateTime?
  status        String   @default("draft") // draft, submitted, reviewed, awarded, rejected
  checksum      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  rfp           RFP      @relation(fields: [rfpId], references: [id], onDelete: Cascade)
  vendor        Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  answers       Answer[]
  scores        Score[]
  consensus     ConsensusScore[]

  @@unique([rfpId, vendorId, version])
  @@map("submissions")
}

model Answer {
  id           String   @id @default(cuid())
  submissionId String
  questionId   String
  valueText    String?
  valueNumber  Float?
  valueOption  String?
  fileRef      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, questionId])
  @@map("answers")
}

model Score {
  id           String   @id @default(cuid())
  submissionId String
  criterionId  String
  evaluatorId  String
  scoreValue   Float
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  submission   Submission     @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  criterion    RubricCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  evaluator    User           @relation(fields: [evaluatorId], references: [id], onDelete: Cascade)

  @@unique([submissionId, criterionId, evaluatorId])
  @@map("scores")
}

model ConsensusScore {
  id           String   @id @default(cuid())
  submissionId String
  criterionId  String
  scoreValue   Float
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  submission   Submission     @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  criterion    RubricCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, criterionId])
  @@map("consensus_scores")
}

model Approval {
  id          String   @id @default(cuid())
  rfpId       String
  stage       String   // draft, legal_review, budget, publish, evaluation_complete, award, contract
  approverId  String
  status      String   @default("pending") // pending, approved, rejected
  decidedAt   DateTime?
  comments    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  rfp         RFP   @relation(fields: [rfpId], references: [id], onDelete: Cascade)
  approver    User  @relation(fields: [approverId], references: [id], onDelete: Cascade)

  @@map("approvals")
}

model File {
  id          String   @id @default(cuid())
  tenantId    String
  path        String
  sha256      String?
  size        Int?
  mime        String?
  version     Int      @default(1)
  retention   String?  // retention policy
  legalHold   Boolean  @default(false)
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("files")
}

model ActivityLog {
  id          String   @id @default(cuid())
  tenantId    String
  actor       String   // User ID or "system"
  action      String
  targetType  String
  targetId    String
  timestamp   DateTime @default(now())
  ip          String?
  metadata    Json?

  // Relationships
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User?    @relation("UserActivityLogs", fields: [actor], references: [id])
  rfp         RFP?     @relation("RFPActivityLogs", fields: [targetId], references: [id])

  @@map("activity_logs")
}

model WebhookEndpoint {
  id        String   @id @default(cuid())
  tenantId  String
  url       String
  events    Json?    // Array of event types stored as JSON
  secret    String?
  status    String   @default("active") // active, inactive
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("webhook_endpoints")
}

model SecurityAlert {
  id          String   @id @default(cuid())
  tenantId    String
  type        String
  message     String
  severity    String   @default("medium") // low, medium, high, critical
  status      String   @default("active") // active, resolved, dismissed
  metadata    Json?
  resolution  String?
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("security_alerts")
}

model ApprovalWorkflow {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String?
  stages      Json     // Array of stage objects stored as JSON
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tenant      Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  processes   ApprovalProcess[]

  @@map("approval_workflows")
}

model ApprovalProcess {
  id          String   @id @default(cuid())
  rfpId       String
  workflowId  String
  requestedBy String
  status      String   @default("in_progress") // in_progress, completed, rejected
  currentStage Int     @default(0)
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?

  // Relationships
  rfp         RFP               @relation(fields: [rfpId], references: [id], onDelete: Cascade)
  workflow    ApprovalWorkflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  requests    ApprovalRequest[]

  @@map("approval_processes")
}

model ApprovalRequest {
  id          String   @id @default(cuid())
  processId   String
  stageId     String
  stageName   String
  approverRole String
  slaHours    Int
  status      String   @default("waiting") // waiting, pending, approved, rejected
  approverId  String?
  dueAt       DateTime
  decidedAt   DateTime?
  comments    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  process     ApprovalProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  approver    User?           @relation(fields: [approverId], references: [id])

  @@map("approval_requests")
}

// Marketplace Models
model Marketplace {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relationships
  publicRfps  PublicRFP[]
  categories  Category[]
  reviews     Review[]
  
  @@map("marketplaces")
}

model PublicRFP {
  id              String   @id @default(cuid())
  marketplaceId   String
  tenantId        String   // Original RFP creator
  rfpId           String   @unique // Link to original RFP - one-to-one relationship
  visibility      String   @default("public") // public, private, restricted
  status          String   @default("active") // active, closed, awarded, cancelled
  featured        Boolean  @default(false)
  viewCount       Int      @default(0)
  bidCount        Int      @default(0)
  expiresAt       DateTime?
  publishedAt     DateTime @default(now())
  metadata        Json?    // Additional public metadata
  
  // Relationships
  marketplace     Marketplace @relation(fields: [marketplaceId], references: [id], onDelete: Cascade)
  tenant          Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  rfp             RFP         @relation(fields: [rfpId], references: [id], onDelete: Cascade)
  bids            Bid[]
  publicQnA       PublicQnA[]
  categories      PublicRFPCategory[]
  reviews         Review[]
  
  @@map("public_rfps")
}

model Category {
  id            String   @id @default(cuid())
  marketplaceId String
  name          String
  description   String?
  icon          String?
  color         String?
  isActive      Boolean  @default(true)
  sortOrder     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // Relationships
  marketplace   Marketplace       @relation(fields: [marketplaceId], references: [id], onDelete: Cascade)
  publicRfps    PublicRFPCategory[]
  
  @@unique([marketplaceId, name])
  @@map("categories")
}

model PublicRFPCategory {
  id          String   @id @default(cuid())
  publicRfpId String
  categoryId  String
  
  // Relationships
  publicRfp   PublicRFP @relation(fields: [publicRfpId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([publicRfpId, categoryId])
  @@map("public_rfp_categories")
}

model VendorProfile {
  id              String   @id @default(cuid())
  userId          String   // Link to User table
  businessName    String
  description     String?
  website         String?
  logo            String?
  coverImage      String?
  phone           String?
  email           String?
  address         Json?
  specialties     Json?    // Array of specialties
  certifications  Json?    // Array of certifications
  portfolio       Json?    // Portfolio items
  isVerified      Boolean  @default(false)
  verificationLevel String @default("basic") // basic, enhanced, premium
  rating          Float    @default(0)
  reviewCount     Int      @default(0)
  projectCount    Int      @default(0)
  isActive        Boolean  @default(true)
  settings        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  // Relationships
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  bids            Bid[]
  reviews         Review[]
  publicQnA       PublicQnA[]
  vendorSpecialties VendorSpecialty[]
  
  @@unique([userId])
  @@map("vendor_profiles")
}

model VendorSpecialty {
  id              String   @id @default(cuid())
  vendorProfileId String
  specialty       String
  level           String   @default("expert") // beginner, intermediate, expert, master
  yearsExperience Int?
  projects        Int      @default(0)
  isActive        Boolean  @default(true)
  
  // Relationships
  vendorProfile   VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  
  @@unique([vendorProfileId, specialty])
  @@map("vendor_specialties")
}

model Bid {
  id              String   @id @default(cuid())
  publicRfpId     String
  vendorProfileId String
  amount          Float?
  currency        String   @default("USD")
  duration        String?  // e.g., "3 months", "6 weeks"
  proposal        String?  // Proposal summary
  attachments     Json?    // Array of file references
  status          String   @default("draft") // draft, submitted, reviewed, accepted, rejected, withdrawn
  submittedAt     DateTime?
  reviewedAt      DateTime?
  decisionAt      DateTime?
  notes           String?
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  // Relationships
  publicRfp       PublicRFP      @relation(fields: [publicRfpId], references: [id], onDelete: Cascade)
  vendorProfile   VendorProfile  @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  messages        BidMessage[]
  reviews         Review[]
  
  @@unique([publicRfpId, vendorProfileId])
  @@map("bids")
}

model BidMessage {
  id          String   @id @default(cuid())
  bidId       String
  senderId    String   // User ID
  message     String
  attachments Json?    // Array of file references
  isPublic    Boolean  @default(false) // Visible to all marketplace participants
  createdAt   DateTime @default(now())
  // Relationships
  bid         Bid       @relation(fields: [bidId], references: [id], onDelete: Cascade)
  sender      User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
  @@map("bid_messages")
}

model PublicQnA {
  id           String   @id @default(cuid())
  publicRfpId  String
  vendorProfileId String? // Optional, can be anonymous
  question     String
  answer       String?
  answerBy     String?  // User ID who answered
  isPublic     Boolean  @default(true)
  status       String   @default("pending") // pending, answered, closed
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  // Relationships
  publicRfp    PublicRFP      @relation(fields: [publicRfpId], references: [id], onDelete: Cascade)
  vendorProfile VendorProfile? @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  answerer     User?          @relation("UserPublicQnA", fields: [answerBy], references: [id])
  
  @@map("public_qna")
}

model Review {
  id              String   @id @default(cuid())
  vendorProfileId String
  reviewerId      String   // User ID who left review
  publicRfpId     String?  // Optional, if related to specific project
  bidId           String?  // Optional, if related to specific bid
  marketplaceId   String?  // Optional, if related to marketplace
  rating          Float    // 1-5 stars
  title           String?
  comment         String?
  response        String?  // Vendor's response to review
  status          String   @default("published") // published, flagged, removed
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  // Relationships
  vendorProfile   VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  reviewer        User          @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  publicRfp       PublicRFP?    @relation(fields: [publicRfpId], references: [id], onDelete: Cascade)
  bid             Bid?           @relation(fields: [bidId], references: [id], onDelete: Cascade)
  marketplace     Marketplace?  @relation(fields: [marketplaceId], references: [id], onDelete: Cascade)
  
  @@map("reviews")
}

model SavedSearch {
  id          String   @id @default(cuid())
  userId      String
  name        String
  query       Json     // Search criteria
  frequency   String   @default("daily") // daily, weekly, monthly
  isActive    Boolean  @default(true)
  lastRunAt   DateTime?
  nextRunAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relationships
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications Notification[]
  
  @@map("saved_searches")
}

model Notification {
  id            String   @id @default(cuid())
  userId        String
  savedSearchId String?
  type          String   // new_rfp, bid_accepted, question_answered, etc.
  title         String
  message       String
  data          Json?    // Additional notification data
  isRead        Boolean  @default(false)
  isDismissed   Boolean  @default(false)
  expiresAt     DateTime?
  createdAt     DateTime @default(now())
  // Relationships
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  savedSearch   SavedSearch? @relation(fields: [savedSearchId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model Transaction {
  id            String   @id @default(cuid())
  tenantId      String
  type          String   // subscription_fee, transaction_fee, success_fee
  amount        Float
  currency      String   @default("USD")
  status        String   @default("pending") // pending, completed, failed, refunded
  description   String?
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // Relationships
  tenant        Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
}

model UsageMetrics {
  id            String   @id @default(cuid())
  tenantId      String
  metricType    String   // rfp_views, bid_submissions, vendor_searches, etc.
  count         Int      @default(1)
  date          DateTime @default(now())
  metadata      Json?
  
  // Relationships
  tenant        Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, metricType, date])
  @@map("usage_metrics")
}